{"pages":[{"title":"","text":"个人简介 93年生人，从事java服务端开发工作4年，现居上海 Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。","link":"/about/index.html"}],"posts":[{"title":"ddd","text":"###JAVA TEST 123public static void main(String[] args){ System.out.println(\"Hello world!\");}","link":"/2020/04/20/ddd/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/04/19/hello-world/"},{"title":"test2","text":"一级标题二级标题三级标题四级标题五级标题 这是一段java代码java12345678910private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0)); private static final int COUNT_BITS = Integer.SIZE - 3; private static final int COUNT_MASK = (1 &lt;&lt; COUNT_BITS) - 1; // runState is stored in the high-order bits private static final int RUNNING = -1 &lt;&lt; COUNT_BITS; private static final int SHUTDOWN = 0 &lt;&lt; COUNT_BITS; private static final int STOP = 1 &lt;&lt; COUNT_BITS; private static final int TIDYING = 2 &lt;&lt; COUNT_BITS; private static final int TERMINATED = 3 &lt;&lt; COUNT_BITS; 这仍是一个测试 这是一段json代码json1234{ \"id\": 12, \"name\": \"ssss\"} 现在我要修改下这个文件~ MarkDown样式测试标签我需要展示一个标签 引用 这是一段摘要 这是内嵌引用 正常引用 分割线 图片 超链接12[简书](http://jianshu.com)[百度](http://baidu.com) 哔哩哔哩动画 列表列表如下： 列表1 列表2 列表3 列表4 列表5 列表6 有序列表 列表1 列表2 表格1234表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容 id name age 1 小明 21 2 小红 20 3 小黄 19","link":"/2020/04/22/test2/"},{"title":"二叉树","text":"一、利用java实现一个二叉树三级标题123public static void main(String[] args){ System.out.println(\"是的，如你所见，这又是个测试\");} 二、利用java实现一个二叉树三级标题123public static void main(String[] args){ System.out.println(\"是的，如你所见，这又是个测试\");}","link":"/2014/04/21/%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"title":"利用java实现一个简单的链表结构","text":"定义所谓链表就是指在某节点存储数据的过程中还要有一个属性用来指向下一个链表节点，这样的数据存储方式叫做链表 链表的优缺点优点：易于存储和删除 缺点：查询起来较麻烦 java实现下面我们用java来实现如下链表结构： 首先定义节点类： 123456789101112131415161718192021222324252627282930package LinkTest;/** * 链表节点类 * @author admin * */public class Node { private int value;//存储数据 private Node next;//下一个节点 /** * 定义构造器 * @param vlaue * @param value */ public Node(int value){ this.value=value; } public int getValue() { return value; } public void setValue(int value) { this.value = value; } public Node getNext() { return next; } public void setNext(Node next) { this.next = next; }} 代码块1 然后定义一个链表类： * 注意：遍历链表定义了两个方法，一个是普通方法，一个是递归方法，都可以遍历出来 12345678910111213141516171819202122232425262728293031323334353637383940414243444546package LinkTest;/** * 链表 * @author admin * */public class Link { private Node current; private Node root; public void insert(int vlaue){ Node newNode=new Node(vlaue); if(this.current==null){ this.current=newNode; this.root=this.current; }else{ this.current.setNext(newNode); this.current=this.current.getNext(); } } //普通遍历 public void getList(){ this.current=this.root; while(this.current!=null){ System.out.print(this.current.getValue()); this.current=this.current.getNext(); if(this.current!=null){ System.out.print(\"-------&gt;\"); } } } //递归遍历 public void getList2(){ DG(this.root); } //递归方法 public void DG(Node node){ System.out.print(node.getValue()+\"-----&gt;\"); if(node.getNext()!=null){ DG(node.getNext()); }else{ return; } }} 代码块2 测试类： 123456789101112131415161718package LinkTest;/** * 测试类 * @author admin * */public class Test { public static void main(String[] args){ Link l=new Link(); l.insert(1); l.insert(4); l.insert(5); l.insert(6); l.insert(9); l.insert(8); l.getList(); }} 代码块3 测试类运行结果： 11-------&gt;4-------&gt;5-------&gt;6-------&gt;9-------&gt;8 这样我们就用java实现了一个简单的链表结构。","link":"/2014/07/04/%E5%88%A9%E7%94%A8java%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"java基础","slug":"java基础标签","link":"/tags/java%E5%9F%BA%E7%A1%80%E6%A0%87%E7%AD%BE/"},{"name":"半·教程","slug":"半·教程","link":"/tags/%E5%8D%8A%C2%B7%E6%95%99%E7%A8%8B/"},{"name":"java","slug":"java","link":"/tags/java/"},{"name":"二叉树","slug":"二叉树","link":"/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"name":"数据结构","slug":"数据结构","link":"/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"链表","slug":"链表","link":"/tags/%E9%93%BE%E8%A1%A8/"}],"categories":[{"name":"java","slug":"java基础相关文档","link":"/categories/java%E5%9F%BA%E7%A1%80%E7%9B%B8%E5%85%B3%E6%96%87%E6%A1%A3/"},{"name":"数据结构","slug":"数据结构","link":"/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"java进化论","slug":"java基础相关文档/java进化论","link":"/categories/java%E5%9F%BA%E7%A1%80%E7%9B%B8%E5%85%B3%E6%96%87%E6%A1%A3/java%E8%BF%9B%E5%8C%96%E8%AE%BA/"},{"name":"树","slug":"数据结构/树","link":"/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/"},{"name":"链表","slug":"数据结构/链表","link":"/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/"}]}